# Copyright (C) 2017 Chris Liebert

CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

SET(EXECUTABLE_NAME "desktop_app")

PROJECT(${EXECUTABLE_NAME})

IF(GNU STREQUAL ${CMAKE_C_COMPILER_ID})
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2")
ENDIF(GNU STREQUAL ${CMAKE_C_COMPILER_ID})

IF(MSVC)
  SET(LIB_PREFIX "")
  SET(LIB_EXTENSION .lib)
  SET(CMAKE_CXX_FLAGS_DEBUG "/MDd /Z7 /Od")
  SET(CMAKE_C_FLAGS_DEBUG "/MDd /Z7 /Od")
ELSE(MSVC)
  SET(LIB_PREFIX lib)
  SET(LIB_EXTENSION .a)
ENDIF(MSVC)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

SET(USE_EXISTING_GLFW3 OFF CACHE BOOL "use an existing glfw3 installation")
SET(USE_EXISTING_GLM OFF CACHE BOOL "use an existing glm installation")
SET(USE_EXISTING_BULLET OFF CACHE BOOL "use an existing bullet installation")
SET(USE_EXISTING_TINYOBJLOADER OFF CACHE BOOL "use an existing tinybojloader installation")
SET(GLFW3_FOUND OFF CACHE BOOL "")

SET(CMAKE_DEBUG_POSTFIX "_Debug" CACHE STRING "add a postfix for Debug mode")
SET(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Debug or Release build configuration")

FIND_PACKAGE(OpenGL REQUIRED)

IF("${CMAKE_BUILD_TYPE}" STREQUAL "")
  MESSAGE(Warning, "CMAKE_BUILD_TYPE not specified, defaulting to Debug. Note: switching the configuration after the dependencies are built will cause dependency problems. Consider using a separate directory for each CMake build configuration")
  SET(CMAKE_BUILD_TYPE "Debug")
ENDIF("${CMAKE_BUILD_TYPE}" STREQUAL "")

IF("${CMAKE_BUILD_TYPE}" STREQUAL Release)
  SET(LIB_SUFFIX "")
ELSEIF("${CMAKE_BUILD_TYPE}" STREQUAL Debug)
  SET(LIB_SUFFIX _Debug)	
ELSE("${CMAKE_BUILD_TYPE}" STREQUAL Release)
  MESSAGE(ERROR "CMAKE_BUILD_TYPE not recognized, use Debug or Release")
ENDIF("${CMAKE_BUILD_TYPE}" STREQUAL Release)  

IF(NOT USE_EXISTING_GLFW3 AND NOT GLFW3_FOUND)
    FIND_PACKAGE(Git REQUIRED)
    SET(GLFW3_PREFIX ${CMAKE_BINARY_DIR}/glfw3) 
    MESSAGE(" GLFW3 not found, downloading via GIT")
    INCLUDE(ExternalProject)
    SET(ADDITIONAL_GLFW3_OPTIONS "")
    IF(MSVC)
    SET(ADDITIONAL_GLFW3_OPTIONS -DUSE_MSVC_RUNTIME_LIBRARY_DLL:BOOL=OFF)
    ENDIF(MSVC)
    ExternalProject_Add(
      glfw3_dependency
      PREFIX ${GLFW3_PREFIX}
      GIT_REPOSITORY https://github.com/glfw/glfw.git
      CMAKE_GENERATOR "${CMAKE_GENERATOR}"
      CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:STRING=${GLFW3_PREFIX} -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS} -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE} -DCMAKE_DEBUG_POSTFIX:STRING=${CMAKE_DEBUG_POSTFIX} -DGLFW_BUILD_EXAMPLES:BOOL=OFF -DGLFW_BUILD_TESTS:BOOL=OFF ${ADDITIONAL_GLFW3_OPTIONS}
      UPDATE_COMMAND "" #disable updating git repo every build
      LOG_DOWNLOAD ON
    )
    ExternalProject_Get_Property(glfw3_dependency install_dir)
    ExternalProject_Get_Property(glfw3_dependency source_dir)
    SET(GLFW3_LIBRARY_PATH ${install_dir}/lib/${LIB_PREFIX}glfw3${LIB_SUFFIX}${LIB_EXTENSION})
    SET(GLFW3_INCLUDE_DIRS ${source_dir}/include)
    ADD_LIBRARY(glfw3Library STATIC IMPORTED)
    SET_PROPERTY(TARGET glfw3Library PROPERTY IMPORTED_LOCATION ${GLFW3_LIBRARY_PATH})
    SET(GLFW3_LIBRARY glfw3Library)
    SET(GLFW3_LIBRARIES ${GLFW3_LIBRARY})
    IF(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
        FIND_PACKAGE(X11 REQUIRED)
	FIND_PACKAGE(Threads REQUIRED)
        SET(GLFW3_LIBRARIES "${GLFW3_LIBRARIES};${X11_LIBRARIES};${X11_Xrandr_LIB};${X11_Xinerama_LIB};${X11_Xcursor_LIB};${CMAKE_THREAD_LIBS_INIT}")
    ENDIF(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")  
    SET(GLFW3_FOUND ON)
ELSEIF(USE_EXISTING_GLFW3)
    FIND_PACKAGE(glfw3 3 REQUIRED)
    SET(GLFW3_LIBRARY glfw)
ENDIF(NOT USE_EXISTING_GLFW3 AND NOT GLFW3_FOUND)

IF(NOT USE_EXISTING_GLM AND NOT GLM_FOUND)
    FIND_PACKAGE(Git REQUIRED)
    SET(GLM_PREFIX ${CMAKE_BINARY_DIR}/glm)
    MESSAGE(" GLM not found, downloading via GIT")
    INCLUDE(ExternalProject)
    ExternalProject_Add(
      glm_dependency
      PREFIX ${GLM_PREFIX}
      GIT_REPOSITORY https://github.com/g-truc/glm.git
      CMAKE_GENERATOR "${CMAKE_GENERATOR}"
      CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:STRING=${GLM_PREFIX} -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE} -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS} -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS} -DCMAKE_DEBUG_POSTFIX:STRING="" #-DGLM_STATIC_LIBRARY_ENABLE:BOOL=ON
      CONFIGURE_COMMAND ""
      BUILD_COMMAND ""
      INSTALL_COMMAND ""
      UPDATE_COMMAND "" #disable updating git repo every build
      LOG_DOWNLOAD ON
    )
    ExternalProject_Get_Property(glm_dependency source_dir)
    SET(GLM_INCLUDE_DIRS ${source_dir})
    SET(GLM_FOUND ON)
ELSEIF(USE_EXISTING_GLM)
    FIND_PACKAGE(glm REQUIRED)
ENDIF(NOT USE_EXISTING_GLM AND NOT GLM_FOUND)

IF(NOT USE_EXISTING_TINYOBJLOADER AND NOT TINYOBJLOADER_FOUND)
    FIND_PACKAGE(Git REQUIRED)
    SET(TINYOBJLOADER_PREFIX ${CMAKE_BINARY_DIR}/tinyobjloader)
    MESSAGE(" TINYOBJLOADER not found, downloading via GIT")
    INCLUDE(ExternalProject)
    ExternalProject_Add(
      tinyobjloader_dependency
      PREFIX ${TINYOBJLOADER_PREFIX}
      CMAKE_GENERATOR "${CMAKE_GENERATOR}"
      CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:STRING=${TINYOBJLOADER_PREFIX} -DCMAKE_INSTALL_LIBDIR:STRING=lib -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE} -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS} -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS} -DCMAKE_DEBUG_POSTFIX:STRING=${CMAKE_DEBUG_POSTFIX}
      GIT_REPOSITORY https://github.com/syoyo/tinyobjloader.git
      UPDATE_COMMAND "" #disable updating git repo every build
      LOG_DOWNLOAD ON
    )
    ExternalProject_Get_Property(tinyobjloader_dependency install_dir)
    SET(TINYOBJLOADER_INCLUDE_DIRS ${install_dir}/include)
    SET(TINYOBJLOADER_LIBRARY_PATH ${install_dir}/lib/${LIB_PREFIX}tinyobjloader${LIB_SUFFIX}${LIB_EXTENSION})
    ADD_LIBRARY(tinyobjloaderLibrary STATIC IMPORTED)
    SET_PROPERTY(TARGET tinyobjloaderLibrary PROPERTY IMPORTED_LOCATION ${TINYOBJLOADER_LIBRARY_PATH})
    SET(TINYOBJLOADER_LIBRARY tinyobjloaderLibrary)
    SET(TINYOBJLOADER_FOUND ON)
ELSEIF(USE_EXISTING_TINYOBJLOADER)
    FIND_PACKAGE(tinyobjloader REQUIRED)
ENDIF(NOT USE_EXISTING_TINYOBJLOADER AND NOT TINYOBJLOADER_FOUND)

IF(NOT USE_EXISTING_BULLET AND NOT BULLET_FOUND)
    FIND_PACKAGE(Git REQUIRED)
	MESSAGE(" Bullet not found, downloading via GIT")
	SET(BULLET_PREFIX ${CMAKE_BINARY_DIR}/bullet)
	INCLUDE(ExternalProject)
	IF(MSVC)
		SET(PLATFORM_SPECIFIC_FLAGS -DUSE_MSVC_RUNTIME_LIBRARY_DLL:BOOL=ON)
	ENDIF(MSVC)
	ExternalProject_Add(
	  bullet_dependency
	  CMAKE_GENERATOR "${CMAKE_GENERATOR}"
	  #CMAKE_DEBUG_POSTFIX "${BULLET_LIB_SUFFIX}"
	  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:STRING=${BULLET_PREFIX} -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE} -DCMAKE_DEBUG_POSTFIX:STRING=${CMAKE_DEBUG_POSTFIX} -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS} -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS} -DCMAKE_CXX_FLAGS_DEBUG:STRING=${CMAKE_CXX_FLAGS_DEBUG} -DCMAKE_C_FLAGS_DEBUG:STRING=${CMAKE_C_FLAGS_DEBUG} ${PLATFORM_SPECIFIC_FLAGS} -DBUILD_EXTRAS:BOOL=OFF -DINSTALL_LIBS:BOOL=ON -DUSE_GLUT:BOOL=OFF -DBUILD_UNIT_TESTS:BOOL=OFF -DBUILD_BULLET2_DEMOS:BOOL=OFF -DBUILD_SHARED_LIBS:BOOL=OFF
	  PREFIX ${BULLET_PREFIX}
	  GIT_REPOSITORY https://github.com/bulletphysics/bullet3.git
	  UPDATE_COMMAND "" #disable updating git repo every build
	  LOG_DOWNLOAD ON
	)
    ExternalProject_Get_Property(bullet_dependency install_dir)
    SET(BULLET_INCLUDE_DIRS ${install_dir}/include ${install_dir}/include/bullet)
	ADD_LIBRARY(LinearMathLibrary STATIC IMPORTED)
	ADD_LIBRARY(BulletCollisionLibrary STATIC IMPORTED)
	ADD_LIBRARY(BulletDynamicsLibrary STATIC IMPORTED)
	ADD_LIBRARY(BulletSoftBodyLibrary STATIC IMPORTED)
	SET_PROPERTY(TARGET LinearMathLibrary PROPERTY IMPORTED_LOCATION ${BULLET_PREFIX}/lib/${LIB_PREFIX}LinearMath${LIB_SUFFIX}${LIB_EXTENSION})
	SET_PROPERTY(TARGET BulletCollisionLibrary PROPERTY IMPORTED_LOCATION ${BULLET_PREFIX}/lib/${LIB_PREFIX}BulletCollision${LIB_SUFFIX}${LIB_EXTENSION})
	SET_PROPERTY(TARGET BulletDynamicsLibrary PROPERTY IMPORTED_LOCATION ${BULLET_PREFIX}/lib/${LIB_PREFIX}BulletDynamics${LIB_SUFFIX}${LIB_EXTENSION})
	SET_PROPERTY(TARGET BulletSoftBodyLibrary PROPERTY IMPORTED_LOCATION ${BULLET_PREFIX}/lib/${LIB_PREFIX}BulletSoftBody${LIB_SUFFIX}${LIB_EXTENSION})
	SET(BULLET_LIBRARIES BulletSoftBodyLibrary BulletDynamicsLibrary BulletCollisionLibrary LinearMathLibrary)
ELSE(USE_EXISTING_BULLET)
	FIND_PACKAGE(Bullet REQUIRED)
ENDIF(NOT USE_EXISTING_BULLET AND NOT BULLET_FOUND)

SET(SRC_PATH ${CMAKE_SOURCE_DIR})
FILE(GLOB GRAPHICS_LIBRARY_SOURCE_FILES
    "${SRC_PATH}/include/common/*.h"
    "${SRC_PATH}/include/graphics/*.h"
    "${SRC_PATH}/src/graphics/*.cc"
    "${SRC_PATH}/src/graphics/*.c"
	"${SRC_PATH}/include/physics/*.h"
	"${SRC_PATH}/src/physics/*.cc"
    "${SRC_PATH}/include/desktop/*.h"
    "${SRC_PATH}/src/desktop/*.cc"
    "${SRC_PATH}/src/desktop/*.c"
)

FILE(GLOB APPLICATION_LIBRARY_SOURCE_FILES
    "${SRC_PATH}/include/application/*.h"
    "${SRC_PATH}/src/application/*.cc"
)

ADD_EXECUTABLE(${EXECUTABLE_NAME}
	${GRAPHICS_LIBRARY_SOURCE_FILES}
	${SRC_PATH}/src/main.cc
	${APPLICATION_LIBRARY_SOURCE_FILES}
)

IF(NOT USE_EXISTING_GLFW3 AND NOT GLFW3_FOUND)
    ADD_DEPENDENCIES(${EXECUTABLE_NAME} glfw3_dependency)
ENDIF(NOT USE_EXISTING_GLFW3 AND NOT GLFW3_FOUND)

IF(NOT USE_EXISTING_TINYOBJLOADER AND NOT TINYOBJLOADER_FOUND)
	ADD_DEPENDENCIES(${EXECUTABLE_NAME} tinyobjloader_dependency)
ENDIF(NOT USE_EXISTING_TINYOBJLOADER AND NOT TINYOBJLOADER_FOUND)

IF(NOT USE_EXISTING_BULLET AND NOT BULLET_FOUND)
    ADD_DEPENDENCIES(${EXECUTABLE_NAME} bullet_dependency)
ENDIF(NOT USE_EXISTING_BULLET AND NOT BULLET_FOUND)

IF(NOT USE_EXISTING_GLM AND NOT GLM_FOUND)
	ADD_DEPENDENCIES(${EXECUTABLE_NAME} glm_dependency)
ENDIF(NOT USE_EXISTING_GLM AND NOT GLM_FOUND)

INCLUDE_DIRECTORIES(${SRC_PATH}/include)
INCLUDE_DIRECTORIES(${SRC_PATH}/include/desktop)
INCLUDE_DIRECTORIES(${SRC_PATH}/include/graphics)
INCLUDE_DIRECTORIES(${SRC_PATH}/include/physics)
INCLUDE_DIRECTORIES(${SRC_PATH}/include/application)
INCLUDE_DIRECTORIES(${SRC_PATH}/include/common)
INCLUDE_DIRECTORIES(${GLM_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${TINYOBJLOADER_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${BULLET_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${GLFW3_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})

SET_TARGET_PROPERTIES(${EXECUTABLE_NAME} PROPERTIES DEBUG_POSTFIX "")
SET_TARGET_PROPERTIES(${EXECUTABLE_NAME} PROPERTIES LINKER_LANGUAGE CXX)

LINK_DIRECTORIES(${OpenGL_LIBRARY_DIRS})

ADD_DEFINITIONS(${OPENGL_DEFINITIONS})
ADD_DEFINITIONS(-DDESKTOP_APP=1)

TARGET_LINK_LIBRARIES(${EXECUTABLE_NAME}
  ${TINYOBJLOADER_LIBRARY} ${CMAKE_DL_LIBS}
  ${OPENGL_gl_LIBRARY} ${GLFW3_LIBRARIES}
  ${BULLET_LIBRARIES}
)
